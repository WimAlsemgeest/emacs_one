#+title: Emacs configuration
#+author: Wim Alsemgeest
#+date: 28-05-2023
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* Intro
This is my configuration of emacs (used version 28.2).
To insert a codeblock use ~<el <TAB>~.
To activate the configuration use ~org-babel-tangle~


* Package configuration

A list of the websites used in this config
- [[https://melpa.org/#/][Melpa.org]]
- [[https://elpa.gnu.org/][Elpa.gnu.org]]
- [[https://orgmode.org/][Orgmode]]
  
#+begin_src emacs-lisp
(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
			 ("org" . "https://orgmode.org/elpa/")
			 ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

* Basic UI configuration
** General settings

List with some general settings for the configuration
- Supress the startup message
- Turn on visual bell
- Hide the menubar (future setting now commentet out)
- Turn off tool bar
- Turn off scroll bar
- Set the fringe mode to give some room in the buffer
- Don't use graphical dialog boxes
- Automatic reload buffers when they are changed externaly
    
#+begin_src emacs-lisp

  (setq inhibit-startup-message t)
  (setq visible-bell t)
  ;; (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (set-fringe-mode 10)
  (setq use-dialog-box nil)
  (global-auto-revert-mode 1)

#+end_src

** Set the ESC key to cancel commands
#+begin_src emacs-lisp

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

** Line and column numbers

Show line- and column numbers. But for some modes turn them off.
#+begin_src emacs-lisp

  (global-display-line-numbers-mode 1)
    (setq column-number-mode t)

    (dolist (mode '(org-mode-hook
                    term-mode-hook
                    shell-mode-hook
                    treemacs-mode-hook
                    eshell-mode-hook))
      (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Enable recent file mode

With the command `recent-file-mode` we can get a list with the last files we worked on.
#+begin_src emacs-lisp

  (recentf-mode 1)

#+end_src

** Save the last place we worked on in a file

#+begin_src emacs-lisp

  (save-place-mode 1)

#+end_src

** Save the history of the mini-buffer

To walk through the history use ~M-n~ and ~M-p~.

#+begin_src emacs-lisp

  (setq history-length 50)
  (savehist-mode 1)

#+end_src

** Save the `custom vars` in a seperate file to keep the setup clean.
#+begin_src emacs-lisp

  (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  (load custom-file 'noerror 'nomessage)
  
#+end_src

** Font configuration
Set the font for default, fixed-pitch and variable-pitch
#+begin_src emacs-lisp

  (set-face-attribute 'default nil :font "FiraCode Nerd Font" :height 120)
  (set-face-attribute 'fixed-pitch nil :font "FiraCode Nerd Font" :height 110)
  (set-face-attribute 'variable-pitch nil :font "Liberation Serif" :height 130 :weight 'regular)

#+end_src

* Programming configuration

Website of [[https://github.com/Fanael/rainbow-delimiters][Rainbow delimiters]]

** Rainbow delimiters
#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** Rust mode configuration
Website of [[https://github.com/rust-lang/rust-mode][Rust mode]]
Website of [[https://github.com/brotzeit/rustic][Rustic]]

*** TODO Rust programming setup

* Org mode configuration
** First load org faces
To set the size of the headings it is important that we load `org-faces` first.

#+begin_src emacs-lisp

  (with-eval-after-load
      (require 'org-faces))
  
#+end_src

** Function for setting up org mode
The function ~wa/org-mode-setup ()~ is used to enable and disable modes in org-mode
#+begin_src emacs-lisp

  (defun wa/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (auto-fill-mode 0)
    (visual-line-mode 1))

#+end_src

** Function for setting up font related things
The function ~wa/org-font-setup ()~ is used to setup the look when editing in org-mode
#+begin_src emacs-lisp

  (defun wa/org-font-setup ()
    ;; Replace list hyphen with dots
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))


    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.15)
                    (org-level-3 . 1.1)
                    (org-level-4 . 1.05)
                    (org-level-5 . 1.0)
                    (org-level-6 . 0.95)
                    (org-level-7 . 0.9)
                    (org-level-8 . 0.8)))
    (set-face-attribute (car face) nil :font "Liberation Serif" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

#+end_src

** Load and setup org-mode

#+begin_src emacs-lisp

  (use-package org
    :hook (org-mode . wa/org-mode-setup)
    :config
    (setq org-ellipsis " ▾"
          org-hide-emphasis-markers t)

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
  
    (setq org-agenda-files
          '("~/Nextcloud/OrgFiles/tasks.org"
            "~/Nextcloud/OrgFiles/birthdays.org"))

    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequencd "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    (setq org-refile-targets
          '(("archive.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)
    
    (setq org-tag-alist
          '((:startgroup)
                                          ; put mutually exclusive tags here
            (:endgroup)
            ("@errand" . ?E)
            ("@home" . ?H)
            ("@work" . ?W)
            ("agenda" . ?a)
            ("planning" . ?p)
            ("publish" . ?P)
            ("batch" . ?b)
            ("note" . ?n)
            ("idea" . ?i)
            ("thinking" . ?t)
            ("recurring" . ?r)))

    ;; Configuration of custom agenda views
    (setq org-agenda-custom-commands
          '(("d" "Dashboard"
             ((agenda "" ((org-deadline-warning-days 7)))
              (todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))
              (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

            ("n" "Next Tasks"
             ((todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))))

            ("W" "Work Tasks" tags-todo "+work")

            ;; Low-effort next actions
            ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
             ((org-agenda-overriding-header "Low Effort Tasks")
              (org-agenda-max-todos 20)
              (org-agenda-files org-agenda-files)))

            ("w" "Workflow Status"
             ((todo "WAIT"
                    ((org-agenda-overriding-header "Wait on External")
                     (org-agenda-files org-agenda-files)))
              (todo "REVIEW"
                    ((org-agenda-overriding-header "In Review")
                     (org-agenda-files org-agenda-files)))
              (todo "PLAN"
                    ((org-agenda-overriding-header "In PLanning")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "BACKLOG"
                    ((org-agenda-overriding-header "Project Backlog")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "READY"
                    ((org-agenda-overriding-header "Ready for Work")
                     (org-agenda-files org-agenda-files)))
              (todo "ACTIVE"
                    ((org-agenda-overriding-header "Active Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "COMPLETED"
                    ((org-agenda-overriding-header "Completed Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "CANC"
                    ((org-agenda-overriding-header "Cancelled Projects")
                     (org-agenda-files org-agenda-files)))))))
  
    (wa/org-font-setup))

#+end_src
*** TODO Define a setup for my own to workt with like GTD

** Org-bullets, replace the stars with bullits

Website of [[https://github.com/sabof/org-bullets][Org-bullets]]

#+begin_src emacs-lisp

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

** Center the text in the buffer we are editing

This function setup the filling

#+begin_src emacs-lisp

  (defun wa/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

#+end_src

** Load the package visual-fill-column for centering the text

Website of [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]]

#+begin_src emacs-lisp

  (use-package visual-fill-column
    :defer t
    :hook (org-mode . wa/org-mode-visual-fill))

#+end_src

** Setup org tempo to use templates inserting code-blocks
#+begin_src emacs-lisp

  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("cc" . "src C"))

#+end_src
*** TODO Add rust to the list.

* Setup IRC client

Website [[https://libera.chat/][Libera chat]]
IRC cheatsheet at [[https://gist.github.com/xero/2d6e4b061b4ecbeb9f99][Github]]
To start chating use ~M-x~ and command ~erc-tls~

#+begin_src emacs-lisp

(setq erc-server "irc.libera.chat"
      erc-nick "WimA"
      erc-user-full-name "Wim Alsemgeest"
      erc-track-shorten-start 8
      erc-autojoin-channels-alist '(("irc.libera.chat" "#systemcrafters" "#emacs"))
      erc-kill-buffer-on-part t
      erc-auto-query 'bury)

#+end_src

* Setup the theme
For the theme I use modus-themes website [[https://github.com/protesilaos/modus-themes][Modus-themes]]. The [[https://protesilaos.com/emacs/modus-themes][documentation]] can be found at the website of Protesilaos Stavrou the maker of the theme. The theme is built in emacs on delevery, but the latest version can be installed from GNU ELPA.

#+begin_src emacs-lisp

  (use-package modus-themes
          :ensure t
          :config
          (setq modus-themes-custom-auto-reload nil
              modus-themes-to-toggle '(modus-operandi modus-vivendi)
              modus-themes-mixed-fonts t
              modus-themes-variable-pitch-ui nil
              modus-themes-italic-constructs t
              modus-themes-bold-constructs nil
              modus-themes-org-blocks nil
              modus-themes-completions '((t . (extrabold)))
              modus-themes-prompts nil
              modus-themes-headings
              '((agenda-structure . (variable-pitch light 1.5))
                (agenda-date . (variable-pitch regular 1.1))
                (t . (regular 1.05))))

          (setq modus-themes-common-palette-overrides
              '((cursor magenta-cooler)

                ;; Make the fringe invisible
                (fringe unspecified)

                ;; Make line numbers less intense and add a shade of cyan
                ;; for the current line number
                (fg-line-number-inactive "gray50")
                (fg-line-number-active cyan-cooler)
                (bg-line-number-inactive unspecified)
                (bg-line-number-active unspecified)

                ;; Make the current line of 'hl-line-mode' a fine shade of
                ;; gray
                (bg-hl-line bg-dim)

                ;; Make the region hav a cyan-green background with no
                ;; specific foreground (use foreground of underlying text).
                ;; "bg-sage" refers to Salvia officinalis, else the common
                ;; sage.
                (bg-region bg-sage)
                (fg-region unspecified)

                ;; Make matching parentheses a shade of magenta. It
                ;; complements the region nicely.
                (bg-paren-match bg-magenta-intense)

                ;; Make email citations faint and neutralo, reducing the
                ;; default four colors to two; make mail headers cyan-blue
                (mail-cite-0 fg-dim)
                (mail-cite-1 blue-faint)
                (mail-cite-2 fg-dim)
                (mail-cite-3 blue-faint)
                (mail-part cyan-warmer)
                (mail-recipient blue-warmer)
                (mail-subject magenta-cooler)
                (mail-other cyan-warmer)

                ;; Change dates to a set of more subtle combinations
                (date-deadline magenta-cooler)
                (date-scheduled magneta)
                (date-weekday fg-main)
                (date-event fg-dim)
                (date-now blue faint)

                ;; Make tags (Org) less colorful and tables look the same as
                ;; the default foreground
                (prose-done cyan-cooler)
                (prose-tag fg-dim)
                (prose-table fg-main)

                ;; Make headings less colorful
                (fg-heading-2 blue-faint)
                (fg-heading-3 magenta-faint)
                (fg-heading-4 blue-faint)
                (fg-heading-5 magenta-faint)
                (fg-heading-6 blue-faint)
                (fg-heading-7 magenta-faint)
                (fg-heading-8 blue-faint)

                ;; Make the active mode line a fine shade of lavender
                ;; (purple) and tone down the gray of the inactive mode lines.
                (bg-mode-line-active bg-lavender)
                (border-mode-line-active bg-lavender)
                (bg-mode-line-inactive bd-dim)
                (border-mode-line-inactive bg-inactive)

                ;; Make the prompts a shade of magenta, to fit in nicely with
                ;; the overal blue-cyan-purple style of the other overrides.
                ;; Add a nuanced background as well.
                (bg-prompt bg-magenta-nuanced)
                (fg-prompt magenta-cooler)

                ;; Tweak some settings for constistency.
                (name blue-warmer)
                (identifier magenta-faint)
                (keybind magenta-cooler)
                (accent-0 magenta-cooler)
                (accent-1 cyan-cooler)
                (accent-2 blue-warmer)
                (accent-3 red-cooler))))

      (custom-set-faces
       '(mode-line ((t :box (:style released-button)))))

      (load-theme 'modus-vivendi t)

      (define-key global-map (kbd "<f5>") #'modus-themes-toggle)

#+end_src
