#+title: Emacs configuration
#+author: Wim Alsemgeest
#+date: 28-05-2023
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* Intro
This is my configuration of emacs (used version 28.2).
To insert a codeblock use ~<el <TAB>~.
To activate the configuration use ~org-babel-tangle~

* Define some variables en some setup things
#+begin_src emacs-lisp

    (defvar wa/default-font-size 120)
    (defvar wa/default-variable-font-size 120)
    ;; Make frame transparency overridable
    (defvar wa/frame-transparency '(90 . 90))

    (setq gc-cons-threshold(* 50 1000 1000))

    (defun wa/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
	     (format "%.2f seconds"
		     (float-time
		       (time-subtract after-init-time before-init-time)))
	     gcs-done))

  (add-hook 'emacs-startup-hook #'wa/display-startup-time)

#+end_src
* Package configuration

A list of the websites used in this config
- [[https://melpa.org/#/][Melpa.org]]
- [[https://elpa.gnu.org/][Elpa.gnu.org]]
- [[https://orgmode.org/][Orgmode]]
  
#+begin_src emacs-lisp
(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
			 ("org" . "https://orgmode.org/elpa/")
			 ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

* Basic UI configuration
** General settings

List with some general settings for the configuration
- Supress the startup message
- Turn on visual bell
- Hide the menubar (future setting now commentet out)
- Turn off tool bar
- Turn off scroll bar
- Set the fringe mode to give some room in the buffer
- Don't use graphical dialog boxes
- Automatic reload buffers when they are changed externaly
    
#+begin_src emacs-lisp

  (setq inhibit-startup-message t)
  (setq visible-bell t)
  ;; (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (set-fringe-mode 10)
  (setq use-dialog-box nil)
  (global-auto-revert-mode 1)

#+end_src

** Set the ESC key to cancel commands
#+begin_src emacs-lisp

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

** Line and column numbers

Show line- and column numbers. But for some modes turn them off.
#+begin_src emacs-lisp

  (global-display-line-numbers-mode 1)
  (setq column-number-mode t)

  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Set frame transparency
#+begin_src emacs-lisp

  (set-frame-parameter (selected-frame) 'alpha wa/frame-transparency)
  (add-to-list 'default-frame-alist `(alpha . ,wa/frame-transparency))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

#+end_src

** Install package ivy
[[https://github.com/abo-abo/swiper][
Ivy]] is a generic completion mechanism for Emacs.

#+begin_src emacs-lisp
  (use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))
  

** Install package ivy-rich
#+begin_src emacs-lisp

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))
  
#+end_src
** Install package counsel

Counsel is included in the package Ivy. So we just configure it.
#+begin_src emacs-lisp
  (use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history))
  :config
  (setq ivy-initial-inputs-alist nil)) ;; Don't start searches with ^
  
#+end_src


** Install which key
[[https://github.com/justbur/emacs-which-key][
Which-key]] will display the key-binding from the current entered incomplete command in a popup.

#+begin_src emacs-lisp

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))
  
#+end_src

** Install package helpful for better help

[[https://github.com/Wilfred/helpful][Helpful]] documentation on the website.

#+begin_src emacs-lisp

  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

** Install doom-themes
#+begin_src emacs-lisp

  (use-package doom-themes
    :init
    (load-theme 'doom-palenight t))

#+end_src

** Install package all the icons
#+begin_src emacs-lisp

  (use-package all-the-icons)

#+end_src

** Install doom-modeline
#+begin_src emacs-lisp

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 25)))
  
#+end_src

** Enable recent file mode

With the command `recent-file-mode` we can get a list with the last files we worked on.
#+begin_src emacs-lisp

  (recentf-mode 1)

#+end_src

** Save the last place we worked on in a file

#+begin_src emacs-lisp

  (save-place-mode 1)

#+end_src

** Save the history of the mini-buffer

To walk through the history use ~M-n~ and ~M-p~.

#+begin_src emacs-lisp

  (setq history-length 50)
  (savehist-mode 1)

#+end_src

** Save the `custom vars` in a seperate file to keep the setup clean.
#+begin_src emacs-lisp

  (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  (load custom-file 'noerror 'nomessage)
  
#+end_src

** Font configuration
Set the font for default, fixed-pitch and variable-pitch
#+begin_src emacs-lisp

  (set-face-attribute 'default nil :font "FiraCode Nerd Font" :height wa/default-font-size)
  (set-face-attribute 'fixed-pitch nil :font "FiraCode Nerd Font" :height wa/default-font-size)
  (set-face-attribute 'variable-pitch nil :font "Source Code Pro" :height wa/default-variable-font-size :weight 'regular)

#+end_src

* Keybindings

** Install package general.el
Used for keybindings
#+begin_src emacs-lisp

  (use-package general
  :config
  (general-create-definer wa/leader-keys
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC")

  (wa/leader-keys
   "C-M-j" 'counsel-switch-buffer)
   "t" '(:ignore t :which-key "toggles")
   "tt" '(counsel-load-theme :which-key "choose theme"))

#+end_src

** Install evil

For emulating ~vim~ keybindings we install evil mode.
The website for [[https://github.com/emacs-evil/evil][evil]].
[[https://github.com/emacs-evil/evil-collection][Evil-collection website.]]

#+begin_src emacs-lisp

  (use-package evil
    :init
    (setq evil-want-intergration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even ouside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'message-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
  
#+end_src

* Programming configuration

Website of [[https://github.com/Fanael/rainbow-delimiters][Rainbow delimiters]]


** Rainbow delimiters
#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** Rust mode configuration
Website of [[https://github.com/rust-lang/rust-mode][Rust mode]]
Website of [[https://github.com/brotzeit/rustic][Rustic]]

*** TODO Rust programming setup

* Org mode configuration
** First load org faces
To set the size of the headings it is important that we load `org-faces` first.

#+begin_src emacs-lisp

  (with-eval-after-load
      (require 'org-faces))
  
#+end_src

** Function for setting up org mode
The function ~wa/org-mode-setup ()~ is used to enable and disable modes in org-mode
#+begin_src emacs-lisp

  (defun wa/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (auto-fill-mode 0)
    (visual-line-mode 1))

#+end_src

** Function for setting up font related things
The function ~wa/org-font-setup ()~ is used to setup the look when editing in org-mode
#+begin_src emacs-lisp

  (defun wa/org-font-setup ()
    ;; Replace list hyphen with dots
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))


    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.15)
                    (org-level-3 . 1.1)
                    (org-level-4 . 1.05)
                    (org-level-5 . 1.0)
                    (org-level-6 . 0.95)
                    (org-level-7 . 0.9)
                    (org-level-8 . 0.8)))
    (set-face-attribute (car face) nil :font "Liberation Serif" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

#+end_src

** Load and setup org-mode

#+begin_src emacs-lisp

  (use-package org
    :hook (org-mode . wa/org-mode-setup)
    :config
    (setq org-ellipsis " ▾"
          org-hide-emphasis-markers t)

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
  
    (setq org-agenda-files
          '("~/Nextcloud/OrgFiles/tasks.org"
            "~/Nextcloud/OrgFiles/birthdays.org"))

    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequencd "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    (setq org-refile-targets
          '(("archive.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)
    
    (setq org-tag-alist
          '((:startgroup)
                                          ; put mutually exclusive tags here
            (:endgroup)
            ("@errand" . ?E)
            ("@home" . ?H)
            ("@work" . ?W)
            ("agenda" . ?a)
            ("planning" . ?p)
            ("publish" . ?P)
            ("batch" . ?b)
            ("note" . ?n)
            ("idea" . ?i)
            ("thinking" . ?t)
            ("recurring" . ?r)))

    ;; Configuration of custom agenda views
    (setq org-agenda-custom-commands
          '(("d" "Dashboard"
             ((agenda "" ((org-deadline-warning-days 7)))
              (todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))
              (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

            ("n" "Next Tasks"
             ((todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))))

            ("W" "Work Tasks" tags-todo "+work")

            ;; Low-effort next actions
            ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
             ((org-agenda-overriding-header "Low Effort Tasks")
              (org-agenda-max-todos 20)
              (org-agenda-files org-agenda-files)))

            ("w" "Workflow Status"
             ((todo "WAIT"
                    ((org-agenda-overriding-header "Wait on External")
                     (org-agenda-files org-agenda-files)))
              (todo "REVIEW"
                    ((org-agenda-overriding-header "In Review")
                     (org-agenda-files org-agenda-files)))
              (todo "PLAN"
                    ((org-agenda-overriding-header "In PLanning")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "BACKLOG"
                    ((org-agenda-overriding-header "Project Backlog")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "READY"
                    ((org-agenda-overriding-header "Ready for Work")
                     (org-agenda-files org-agenda-files)))
              (todo "ACTIVE"
                    ((org-agenda-overriding-header "Active Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "COMPLETED"
                    ((org-agenda-overriding-header "Completed Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "CANC"
                    ((org-agenda-overriding-header "Cancelled Projects")
                     (org-agenda-files org-agenda-files)))))))
  
    (wa/org-font-setup))

#+end_src
*** TODO Define a setup for my own to workt with like GTD

** Org-bullets, replace the stars with bullits

Website of [[https://github.com/sabof/org-bullets][Org-bullets]]

#+begin_src emacs-lisp

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

** Center the text in the buffer we are editing

This function setup the filling

#+begin_src emacs-lisp

  (defun wa/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

#+end_src

** Load the package visual-fill-column for centering the text

Website of [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]]

#+begin_src emacs-lisp

  (use-package visual-fill-column
    :defer t
    :hook (org-mode . wa/org-mode-visual-fill))

#+end_src

** Setup org tempo to use templates inserting code-blocks
#+begin_src emacs-lisp

  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("cc" . "src C"))

#+end_src
*** TODO Add rust to the list.

* Setup IRC client

Website [[https://libera.chat/][Libera chat]]
IRC cheatsheet at [[https://gist.github.com/xero/2d6e4b061b4ecbeb9f99][Github]]
To start chating use ~M-x~ and command ~erc-tls~

#+begin_src emacs-lisp

(setq erc-server "irc.libera.chat"
      erc-nick "WimA"
      erc-user-full-name "Wim Alsemgeest"
      erc-track-shorten-start 8
      erc-autojoin-channels-alist '(("irc.libera.chat" "#systemcrafters" "#emacs"))
      erc-kill-buffer-on-part t
      erc-auto-query 'bury)

#+end_src
