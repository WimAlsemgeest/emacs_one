#+TITLE: Wim's GNU Emacs Configuration
#+AUTHOR: Wim Alsemgeest
#+DESCRIPTION: Personal Emacs configuration.
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Emacs configuration.
** Package manager
#+begin_src emacs-lisp

  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
  
#+end_src

** Install use-package
Website of [[https://github.com/jwiegley/use-package#installing-use-package][use-package]]
#+begin_src emacs-lisp

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

  #+end_src

** General settings
Don show the splash screen
Flash when the bell rings
Turn off the toolbar
Turn off the scrollbar
Turn off the menubar
Give some breathing room

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)       ;; Don't show the splash screen
  (setq visible-bell t)                  ;; Flash when the bell rings
  (tool-bar-mode -1)                     ;; Turn off the toolbar
  (scroll-bar-mode -1)                   ;; Turn off the scrollbar
  ;; (menu-bar-mode -1)                     ;; Turn off the menubar
  (set-fringe-mode 10)

#+end_src


** Make ESC quit prompts
#+begin_src emacs-lisp

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

** Set line and column numbers
Show linenummers
Show column nummer mode
Disable line numbers for some modes
#+begin_src emacs-lisp

  (global-display-line-numbers-mode 1)
  (setq column-number-mode t)
  (dolist (mode '(org-mode-hook
		  term-mode-hook
		  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
  
#+end_src

** Remember the last edited files, history minibuffer and last cursor position
#+begin_src emacs-lisp

  (recentf-mode 1)                       ;; Remember the last edited files
  (setq history-length 25)               ;; Remember the last minibuffer prompts
  (savehist-mode 1)                      ;; Enable save-history mode
  (save-place-mode 1)                    ;; Remember and restore de last cursor position

#+end_src
** Prevent UI dialog for prompts
#+begin_src emacs-lisp

  (setq use-dialog-box nil)              ;; Prevent using UI dialog for prompts

#+end_src

** Revert buffers when they are externaly changed
#+begin_src emacs-lisp

  (global-auto-revert-mode 1)            ;; Revert buffers when file is changed
  (setq global-auto-revert-non-file-buffers t)  ;; Revert Dired and other buffers
  
#+end_src

** Move customization variable to a separate file and load it
#+begin_src emacs-lisp

  (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  (load custom-file 'noerror 'nomessage)
  
#+end_src


** Set fontface for Org and other modes
Set the main type face font to Source Code Pro.
Set the proportionately spaced type face to URW Bookman.
Set the fixed-type face font to Source Code Pro.
#+begin_src emacs-lisp

  (set-face-attribute 'default nil :family "Source Code Pro" :height 110)
  (set-face-attribute 'variable-pitch nil :family "URW Bookman" :height 110)
  (set-face-attribute 'fixed-pitch nil :family "Source Code Pro" :height 110)
  
#+end_src

** Setting the theme in Emacs
Theme configuration before loading the theme
Link to website modus-themes https://protesilaos.com/emacs/
#+begin_src emacs-lisp

  (use-package modus-themes
    :ensure t
    :config
    ;; Add all your customizations prior to loading the themes
    (setq modus-themes-italic-constructs t
	  modus-themes-bold-constructs t
	  modus-themes-mixed-fonts t

	  modus-themes-org-blocks "grey-background"
	  )

    (setq modus-themes-headings
	  '((1 . (variable-pitch 1.8))
	    (2 . (variable-pitch 1.6))
	    (3 . (variable-pitch 1.4))
	    (4 . (variable-pitch 1.2))
	    (5 . (variable-pitch 1.0))
	    ))
  

    ;; Maybe define some palette overrides, such as by using our presets
    ;; (setq modus-themes-common-palette-overrides
    ;;	modus-themes-preset-overrides-intense)
    )

  ;; ----- Load the theme and define a key to toggle dark and light ----------------------------------
  (load-theme 'modus-vivendi-tinted t)
  (define-key global-map (kbd "<f5>") #'modus-themes-toggle)

#+end_src

** Install which-key
[[https://github.com/justbur/emacs-which-key][which-key]] on github.com

#+begin_src emacs-lisp

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3)
    (which-key-setup-side-window-right))
  
#+end_src

** Rainbow Delimiters
#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
  
#+end_src

** Helpful
[[https://github.com/Wilfred/helpful][Helpful package]] on github.com

#+begin_src emacs-lisp

  (use-package helpful)
    (global-set-key (kbd "C-h f") #'helpful-callable)
    (global-set-key (kbd "C-h v") #'helpful-variable)
    (global-set-key (kbd "C-h k") #'helpful-key)
    (global-set-key (kbd "C-h x") #'helppul-command)
  
#+end_src

** Doom-modeline
[[https://github.com/seagle0128/doom-modeline][Doom-modeline package]] on github.com
[[https://github.com/ttys3/emacs-doom-themes][Doom-themes package]] on github.com

#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

#+end_src

** Rainbow-mode for color hightlighting
[[https://github.com/emacsmirror/rainbow-mode/blob/master/rainbow-mode.el][Rainbow-mode package]] on github.com

#+begin_src emacs-lisp

  (use-package rainbow-mode
    :ensure t)
  
#+end_src

** Auto completion with ivy
[[https://github.com/abo-abo/swiper][Ivy, swiper and counsel]] can be found on github.com

  (use-package ivy
  :diminish
  :bind (("C-s" . swiper)
	 :map ivy-minibuffer-map
	 ("TAB" . ivy-alt-done)
	 ("C-l" . ivy-alt-done)
	 ("C-j" . ivy-next-line)
	 ("C-k" . ivy-previous-line)
	 :map ivy-switch-buffer-map
	 ("C-k" . ivy-previous-line)
	 ("C-l" . ivy-done)
	 ("C-d" . ivy-switch-buffer-kill)
	 :map ivy-reverse-i-search-map
	 ("C-k" . ivy-previous-line)
	 ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))
  
** Vertico for autocompletion
[[https://github.com/minad/vertico][Vertico package]] on github.com

#+begin_src emacs-lisp

  (use-package vertico
    :ensure t
    :config
    (vertico-mode))
  
#+end_src

** orderless completion style
[[https://github.com/oantolin/orderless][Orderless package]] on github.com
#+begin_src emacs-lisp

    (use-package orderless
      :ensure t
      :config
      (setq completion-styles '(orderless)))
  
#+end_src

** marginalia
[[https://github.com/minad/marginalia][Marginalia package]] on github.com

#+begin_src emacs-lisp

  (use-package marginalia
    :ensure t
    :config
    (marginalia-mode))
  
#+end_src
